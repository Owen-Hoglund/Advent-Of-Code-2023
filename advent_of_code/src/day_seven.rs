//FINAL SOLUTION TO DAY SEVEN

use std::cmp::Ordering;

#[derive(Clone)]
struct Hand {
    cards: Vec<char>,
    bid: i32,
    hand_type: HandType,
    rank: i32
}
impl Hand {
    fn new(hand_string: String, bid: i32) -> Self {
        Hand {
            cards: hand_string.chars().collect(),
            bid: bid,
            hand_type: HandType::get_type(hand_string),
            rank: 0
        }
    }
}

#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy)]
enum HandType {
    HighCard,
    OnePair,
    TwoPair,
    ThreeKind,
    FullHouse,
    FourKind,
    FiveKind,
} 
impl HandType {
    fn get_type(s: String) -> Self {
        let mut occurence_count: Vec<(usize, char)> = Vec::new();
        let joker_count = s.matches('J').count();
        for c in s.chars() {
            occurence_count.push((s.matches(c).count(), c));
        }
        occurence_count.sort();
        occurence_count.dedup();
        let pre_kind = match occurence_count.len() {
            5 => HandType::HighCard,
            4 => HandType::OnePair,
            3 => match occurence_count[2].0 {
                3 => HandType::ThreeKind,
                2 => HandType::TwoPair,
                _ => panic!("This should be an impossible hand")
            }
            2 => match occurence_count[0].0 {
                1 => HandType::FourKind,
                2 => HandType::FullHouse,
                _ => panic!("Impossible hand count")
            }
            1 => HandType::FiveKind,
            _ => panic!("Really bro u have a hand with no types")
        };
        match joker_count == 0 {
            true => return pre_kind,
            false => {
                match pre_kind {
                    HandType::HighCard => HandType::OnePair,
                    HandType::OnePair => HandType::ThreeKind,
                    HandType::TwoPair => match joker_count {
                        1 => HandType::FullHouse,
                        2 => HandType::FourKind,
                        _ => panic!("not possible")
                    },
                    HandType::ThreeKind => HandType::FourKind,
                    HandType::FullHouse => HandType::FiveKind,
                    HandType::FourKind => HandType::FiveKind,
                    HandType::FiveKind => HandType::FiveKind,
                }
            },
        }
    }
}

pub fn day_seven(){
    let hands = get_hands();
    let mut hands: Vec<Hand> = hands.iter().map(|x| Hand::new(x.0.clone(), x.1)).collect();
    hands.sort_by(hand_comparison);
    let mut sum = 0;
    for (rank, mut hand) in hands.into_iter().enumerate() {
        hand.rank = rank as i32 + 1;
        sum += hand.rank * hand.bid;
    }
    println!("{}", sum);
}

fn hand_comparison(h1: &Hand, h2: &Hand) -> Ordering {
    match h1.hand_type.partial_cmp(&h2.hand_type).unwrap() {
        Ordering::Less => Ordering::Less,
        Ordering::Equal => card_comparison(&h1.cards, &h2.cards),
        Ordering::Greater => Ordering::Greater,
    }
}

fn card_comparison(h1: &Vec<char>, h2: &Vec<char>) -> Ordering {
    for (c1, c2)  in h1.iter().zip(h2.iter()) {
        let v1 = card_value(c1);
        let v2 = card_value(c2);
        match v1.partial_cmp(&v2).unwrap(){
            Ordering::Less => return Ordering::Less,
            Ordering::Equal => (),
            Ordering::Greater => return Ordering::Greater,
        }
    }
    Ordering::Equal
}

fn card_value(c: &char) -> i32 {
    match c {
        'A' => 14,
        'K' => 13,
        'Q' => 12,
        'J' => 1,
        'T' => 10,
        '9' => 9,
        '8' => 8,
        '7' => 7,
        '6' => 6,
        '5' => 5,
        '4' => 4,
        '3' => 3,
        '2' => 2,
        _ => panic!("not a valid card")
    }
}

fn get_hands() -> Vec<(String, i32)>{
    let hands = vec![
    ("Q4QKK".to_string(), 465),
    ("28555".to_string(), 580),
    ("JJQK2".to_string(), 602),
    ("84448".to_string(), 722),
    ("7QQ7Q".to_string(), 734),
    ("KKKAK".to_string(), 278),
    ("JQ274".to_string(), 574),
    ("9J242".to_string(), 805),
    ("A33AK".to_string(), 619),
    ("TAK9T".to_string(), 659),
    ("34QK8".to_string(), 514),
    ("23273".to_string(), 199),
    ("T8TT8".to_string(), 318),
    ("333TT".to_string(), 101),
    ("5A955".to_string(), 482),
    ("TT5KJ".to_string(), 784),
    ("59K37".to_string(), 126),
    ("T59TQ".to_string(), 890),
    ("3K549".to_string(), 806),
    ("37QQ3".to_string(), 655),
    ("TJ5T4".to_string(), 958),
    ("8Q7KQ".to_string(), 148),
    ("888AT".to_string(), 868),
    ("4KKKA".to_string(), 67),
    ("QQQ8Q".to_string(), 520),
    ("555Q5".to_string(), 325),
    ("8T4K2".to_string(), 132),
    ("K32Q5".to_string(), 399),
    ("QQ455".to_string(), 937),
    ("55QQQ".to_string(), 592),
    ("63T89".to_string(), 220),
    ("434Q4".to_string(), 254),
    ("88KK8".to_string(), 944),
    ("79799".to_string(), 793),
    ("KJKKK".to_string(), 725),
    ("99J59".to_string(), 70),
    ("73777".to_string(), 788),
    ("5892A".to_string(), 641),
    ("J8JJJ".to_string(), 26),
    ("76676".to_string(), 336),
    ("55T5T".to_string(), 354),
    ("5755T".to_string(), 431),
    ("22299".to_string(), 746),
    ("82462".to_string(), 803),
    ("3J63J".to_string(), 408),
    ("95999".to_string(), 711),
    ("Q59K6".to_string(), 511),
    ("QKJK4".to_string(), 977),
    ("QQKK9".to_string(), 606),
    ("QQ9Q9".to_string(), 47),
    ("A2TQ5".to_string(), 214),
    ("68A88".to_string(), 281),
    ("TQA64".to_string(), 453),
    ("T4633".to_string(), 648),
    ("95959".to_string(), 53),
    ("23377".to_string(), 293),
    ("39993".to_string(), 844),
    ("8QTT8".to_string(), 974),
    ("95655".to_string(), 10),
    ("AAQ4Q".to_string(), 773),
    ("69243".to_string(), 213),
    ("44244".to_string(), 953),
    ("6297T".to_string(), 850),
    ("KAAK4".to_string(), 443),
    ("Q77J2".to_string(), 865),
    ("J4A3A".to_string(), 651),
    ("3Q7Q7".to_string(), 163),
    ("9A28T".to_string(), 129),
    ("J2277".to_string(), 68),
    ("AAAAT".to_string(), 568),
    ("T33TT".to_string(), 907),
    ("KA3Q9".to_string(), 942),
    ("67787".to_string(), 21),
    ("9TAJA".to_string(), 751),
    ("K6KKK".to_string(), 485),
    ("5T4J5".to_string(), 900),
    ("3TKTK".to_string(), 207),
    ("4KQQ4".to_string(), 961),
    ("TTQ4T".to_string(), 613),
    ("K6TQ4".to_string(), 906),
    ("A8K8Q".to_string(), 965),
    ("63QJ5".to_string(), 807),
    ("597Q7".to_string(), 634),
    ("64664".to_string(), 723),
    ("63479".to_string(), 505),
    ("JQQ7Q".to_string(), 870),
    ("JT888".to_string(), 185),
    ("7JTQ8".to_string(), 650),
    ("9888J".to_string(), 7),
    ("6646T".to_string(), 405),
    ("9J66J".to_string(), 140),
    ("2JT22".to_string(), 194),
    ("K5KKK".to_string(), 361),
    ("T7T79".to_string(), 274),
    ("33535".to_string(), 758),
    ("27638".to_string(), 314),
    ("99699".to_string(), 49),
    ("K2QQQ".to_string(), 351),
    ("2K72K".to_string(), 92),
    ("J63KK".to_string(), 702),
    ("J7KT5".to_string(), 795),
    ("J6KJ5".to_string(), 770),
    ("97K99".to_string(), 928),
    ("K376Q".to_string(), 139),
    ("882AT".to_string(), 34),
    ("KK8K8".to_string(), 995),
    ("98AQA".to_string(), 894),
    ("5928Q".to_string(), 364),
    ("AA6A5".to_string(), 633),
    ("T96Q4".to_string(), 249),
    ("96696".to_string(), 567),
    ("AQ9A5".to_string(), 855),
    ("Q6Q44".to_string(), 335),
    ("6K2A8".to_string(), 763),
    ("7665Q".to_string(), 295),
    ("J7364".to_string(), 89),
    ("88848".to_string(), 875),
    ("285K3".to_string(), 623),
    ("6932T".to_string(), 735),
    ("999T6".to_string(), 484),
    ("77888".to_string(), 903),
    ("J8888".to_string(), 261),
    ("324A2".to_string(), 610),
    ("Q6Q53".to_string(), 662),
    ("83QTQ".to_string(), 499),
    ("J6666".to_string(), 256),
    ("5Q5Q2".to_string(), 507),
    ("T6A4K".to_string(), 787),
    ("J5AT5".to_string(), 210),
    ("AQ39Q".to_string(), 400),
    ("8K6K2".to_string(), 331),
    ("J3Q44".to_string(), 280),
    ("KK8KK".to_string(), 926),
    ("66784".to_string(), 923),
    ("87K88".to_string(), 142),
    ("7J235".to_string(), 445),
    ("4QQ44".to_string(), 676),
    ("84KKK".to_string(), 30),
    ("65J56".to_string(), 169),
    ("3AA3A".to_string(), 631),
    ("QTQ4Q".to_string(), 760),
    ("A5A5J".to_string(), 342),
    ("5QT5T".to_string(), 674),
    ("9K549".to_string(), 776),
    ("T2232".to_string(), 343),
    ("96Q66".to_string(), 616),
    ("8J899".to_string(), 597),
    ("J76A6".to_string(), 116),
    ("77388".to_string(), 321),
    ("53333".to_string(), 433),
    ("KK797".to_string(), 394),
    ("9J53Q".to_string(), 545),
    ("5K9KK".to_string(), 985),
    ("66868".to_string(), 874),
    ("J6T63".to_string(), 654),
    ("9A333".to_string(), 696),
    ("678JJ".to_string(), 738),
    ("AATAT".to_string(), 812),
    ("AAT6J".to_string(), 801),
    ("JTTQK".to_string(), 441),
    ("75757".to_string(), 993),
    ("JQ4QQ".to_string(), 523),
    ("222JJ".to_string(), 671),
    ("Q5552".to_string(), 459),
    ("944J9".to_string(), 133),
    ("69A8A".to_string(), 588),
    ("A75K6".to_string(), 872),
    ("KKK44".to_string(), 661),
    ("2K43Q".to_string(), 83),
    ("3KKKK".to_string(), 350),
    ("47773".to_string(), 887),
    ("35858".to_string(), 710),
    ("K65T9".to_string(), 731),
    ("ATQ8J".to_string(), 496),
    ("8K484".to_string(), 397),
    ("TT9QT".to_string(), 157),
    ("2J332".to_string(), 630),
    ("5K3K4".to_string(), 743),
    ("68J26".to_string(), 135),
    ("555J5".to_string(), 975),
    ("K4KQT".to_string(), 452),
    ("QAAAA".to_string(), 884),
    ("8J4J9".to_string(), 398),
    ("4TJ77".to_string(), 679),
    ("55585".to_string(), 93),
    ("J9A4T".to_string(), 182),
    ("42942".to_string(), 503),
    ("5JK2A".to_string(), 151),
    ("2T2K7".to_string(), 672),
    ("4Q2T5".to_string(), 563),
    ("22422".to_string(), 291),
    ("28868".to_string(), 947),
    ("KT7KK".to_string(), 759),
    ("JQQ88".to_string(), 31),
    ("8273K".to_string(), 54),
    ("55588".to_string(), 418),
    ("5K28K".to_string(), 849),
    ("2Q279".to_string(), 896),
    ("65995".to_string(), 590),
    ("723A4".to_string(), 598),
    ("6KA74".to_string(), 127),
    ("KK333".to_string(), 284),
    ("44696".to_string(), 714),
    ("777Q7".to_string(), 277),
    ("K469A".to_string(), 673),
    ("433QJ".to_string(), 862),
    ("A4442".to_string(), 512),
    ("66624".to_string(), 665),
    ("8AA88".to_string(), 536),
    ("7777J".to_string(), 268),
    ("A7575".to_string(), 586),
    ("7K42Q".to_string(), 789),
    ("6A32A".to_string(), 159),
    ("T97Q6".to_string(), 218),
    ("KJA5J".to_string(), 108),
    ("363AJ".to_string(), 510),
    ("4JAT7".to_string(), 960),
    ("88898".to_string(), 534),
    ("2Q2J7".to_string(), 383),
    ("57A9T".to_string(), 852),
    ("TJ9TQ".to_string(), 750),
    ("9T748".to_string(), 775),
    ("QTA83".to_string(), 13),
    ("4KK5K".to_string(), 701),
    ("Q8482".to_string(), 72),
    ("66655".to_string(), 109),
    ("6TTTT".to_string(), 381),
    ("A33JA".to_string(), 779),
    ("62AAA".to_string(), 968),
    ("3KA2Q".to_string(), 924),
    ("2J54A".to_string(), 444),
    ("6A285".to_string(), 886),
    ("63697".to_string(), 595),
    ("459QA".to_string(), 134),
    ("JK5KQ".to_string(), 41),
    ("34628".to_string(), 231),
    ("94544".to_string(), 446),
    ("K6JK6".to_string(), 824),
    ("KKTT6".to_string(), 815),
    ("22229".to_string(), 327),
    ("88TT8".to_string(), 916),
    ("K6J56".to_string(), 2),
    ("T7A73".to_string(), 945),
    ("2J222".to_string(), 555),
    ("727T2".to_string(), 106),
    ("K5664".to_string(), 390),
    ("KJ77Q".to_string(), 326),
    ("555A5".to_string(), 272),
    ("55757".to_string(), 943),
    ("33447".to_string(), 128),
    ("4A37Q".to_string(), 462),
    ("7JJ2T".to_string(), 609),
    ("5T2T5".to_string(), 920),
    ("49932".to_string(), 219),
    ("9J297".to_string(), 221),
    ("QK2J2".to_string(), 332),
    ("J23KK".to_string(), 745),
    ("8A5K4".to_string(), 854),
    ("374K5".to_string(), 371),
    ("35Q7T".to_string(), 663),
    ("666T6".to_string(), 721),
    ("9K9Q3".to_string(), 842),
    ("J55J2".to_string(), 73),
    ("AT6AA".to_string(), 969),
    ("2TAQK".to_string(), 689),
    ("KQ9QQ".to_string(), 486),
    ("99KJ9".to_string(), 996),
    ("4894Q".to_string(), 774),
    ("T9J8Q".to_string(), 61),
    ("TK6T6".to_string(), 488),
    ("7777K".to_string(), 226),
    ("77767".to_string(), 922),
    ("K5QK8".to_string(), 12),
    ("45444".to_string(), 740),
    ("4A448".to_string(), 752),
    ("A8793".to_string(), 426),
    ("3393J".to_string(), 771),
    ("7JTTT".to_string(), 830),
    ("434J9".to_string(), 938),
    ("66656".to_string(), 470),
    ("6JJ66".to_string(), 333),
    ("444J4".to_string(), 170),
    ("33JJJ".to_string(), 800),
    ("Q2K79".to_string(), 467),
    ("254JK".to_string(), 757),
    ("9994Q".to_string(), 186),
    ("94499".to_string(), 804),
    ("J86K6".to_string(), 908),
    ("J8K8K".to_string(), 946),
    ("4276T".to_string(), 164),
    ("K9QAA".to_string(), 695),
    ("779AT".to_string(), 519),
    ("7K463".to_string(), 660),
    ("55454".to_string(), 208),
    ("KK8K9".to_string(), 339),
    ("QJJK9".to_string(), 146),
    ("6K3J6".to_string(), 538),
    ("38T79".to_string(), 732),
    ("6QQ6Q".to_string(), 474),
    ("Q8J4K".to_string(), 299),
    ("99T99".to_string(), 475),
    ("3JK42".to_string(), 87),
    ("T8Q8J".to_string(), 107),
    ("Q4QQK".to_string(), 682),
    ("3J333".to_string(), 811),
    ("54662".to_string(), 744),
    ("JJ4J2".to_string(), 972),
    ("2QA87".to_string(), 473),
    ("249TK".to_string(), 51),
    ("65JA9".to_string(), 251),
    ("AAA6A".to_string(), 871),
    ("QTT73".to_string(), 222),
    ("44J45".to_string(), 670),
    ("47747".to_string(), 3),
    ("2T299".to_string(), 604),
    ("9A922".to_string(), 122),
    ("4T428".to_string(), 359),
    ("4744T".to_string(), 814),
    ("944QQ".to_string(), 532),
    ("28JA8".to_string(), 522),
    ("JJJJJ".to_string(), 230),
    ("88432".to_string(), 910),
    ("K6TAJ".to_string(), 315),
    ("K7AA3".to_string(), 544),
    ("6729J".to_string(), 600),
    ("95QQQ".to_string(), 300),
    ("T7J77".to_string(), 976),
    ("J448T".to_string(), 587),
    ("72J58".to_string(), 412),
    ("T8888".to_string(), 168),
    ("83333".to_string(), 450),
    ("98Q9T".to_string(), 298),
    ("5249Q".to_string(), 352),
    ("58656".to_string(), 558),
    ("347JA".to_string(), 579),
    ("27222".to_string(), 893),
    ("4QK82".to_string(), 131),
    ("5TTT8".to_string(), 994),
    ("43494".to_string(), 454),
    ("474TT".to_string(), 458),
    ("22338".to_string(), 728),
    ("77AJ8".to_string(), 562),
    ("86633".to_string(), 410),
    ("Q7J5A".to_string(), 501),
    ("955J2".to_string(), 242),
    ("QQQ79".to_string(), 835),
    ("ATAQT".to_string(), 525),
    ("A5AAA".to_string(), 178),
    ("39287".to_string(), 289),
    ("KTKQK".to_string(), 845),
    ("364K2".to_string(), 449),
    ("AK3A2".to_string(), 259),
    ("627J2".to_string(), 138),
    ("K8K82".to_string(), 285),
    ("66669".to_string(), 794),
    ("6Q2TA".to_string(), 911),
    ("TTJTJ".to_string(), 24),
    ("KKK33".to_string(), 997),
    ("QKKQK".to_string(), 372),
    ("3K7QQ".to_string(), 264),
    ("62994".to_string(), 175),
    ("3T244".to_string(), 227),
    ("Q77K7".to_string(), 14),
    ("88568".to_string(), 44),
    ("8JT98".to_string(), 404),
    ("7277Q".to_string(), 250),
    ("66555".to_string(), 529),
    ("2KJK2".to_string(), 709),
    ("94T85".to_string(), 263),
    ("T6652".to_string(), 313),
    ("53555".to_string(), 113),
    ("J5T88".to_string(), 432),
    ("Q6949".to_string(), 624),
    ("TKTA8".to_string(), 202),
    ("96667".to_string(), 748),
    ("4AAAA".to_string(), 491),
    ("4A4K4".to_string(), 329),
    ("6252K".to_string(), 998),
    ("4Q269".to_string(), 347),
    ("Q3QQ3".to_string(), 95),
    ("488J6".to_string(), 262),
    ("99J9Q".to_string(), 100),
    ("82T77".to_string(), 591),
    ("35T22".to_string(), 362),
    ("Q7KQQ".to_string(), 691),
    ("A56A5".to_string(), 22),
    ("649Q4".to_string(), 898),
    ("53J22".to_string(), 301),
    ("J4Q5Q".to_string(), 569),
    ("585QJ".to_string(), 81),
    ("82528".to_string(), 495),
    ("K6TTT".to_string(), 32),
    ("Q2222".to_string(), 737),
    ("2Q5T5".to_string(), 990),
    ("Q888Q".to_string(), 341),
    ("8Q866".to_string(), 416),
    ("4449A".to_string(), 508),
    ("88KQQ".to_string(), 819),
    ("AA274".to_string(), 879),
    ("K8Q88".to_string(), 160),
    ("26TK5".to_string(), 237),
    ("JJQQQ".to_string(), 492),
    ("K52QA".to_string(), 490),
    ("JJ974".to_string(), 223),
    ("7T846".to_string(), 136),
    ("32236".to_string(), 820),
    ("9AJ9A".to_string(), 239),
    ("J6QQQ".to_string(), 380),
    ("97Q94".to_string(), 970),
    ("56552".to_string(), 856),
    ("6QQTQ".to_string(), 905),
    ("JJ5AA".to_string(), 837),
    ("K9TT9".to_string(), 103),
    ("8A9TA".to_string(), 267),
    ("J8AA4".to_string(), 196),
    ("2ATAQ".to_string(), 897),
    ("JQTJQ".to_string(), 279),
    ("TTT2T".to_string(), 699),
    ("T2TJ2".to_string(), 966),
    ("JJ5J5".to_string(), 294),
    ("J4K4K".to_string(), 60),
    ("63KKK".to_string(), 768),
    ("AAAA7".to_string(), 38),
    ("K4J44".to_string(), 502),
    ("23493".to_string(), 888),
    ("666KK".to_string(), 831),
    ("TAQ58".to_string(), 434),
    ("AK75T".to_string(), 319),
    ("565A8".to_string(), 769),
    ("58K88".to_string(), 705),
    ("97579".to_string(), 506),
    ("TTQTT".to_string(), 120),
    ("5QQJ8".to_string(), 77),
    ("55KJ5".to_string(), 328),
    ("Q6T3T".to_string(), 375),
    ("KQ9T6".to_string(), 476),
    ("9K777".to_string(), 305),
    ("TT5TT".to_string(), 581),
    ("5557K".to_string(), 955),
    ("69869".to_string(), 91),
    ("Q6925".to_string(), 367),
    ("9624J".to_string(), 530),
    ("9A9A2".to_string(), 550),
    ("5854J".to_string(), 71),
    ("T588T".to_string(), 857),
    ("74QA4".to_string(), 1),
    ("5TJ83".to_string(), 956),
    ("T797J".to_string(), 413),
    ("T6534".to_string(), 935),
    ("T93T3".to_string(), 162),
    ("7A488".to_string(), 859),
    ("737A3".to_string(), 19),
    ("72877".to_string(), 195),
    ("3QAAA".to_string(), 78),
    ("44449".to_string(), 927),
    ("77792".to_string(), 420),
    ("43227".to_string(), 537),
    ("K986T".to_string(), 84),
    ("3J444".to_string(), 754),
    ("83AA5".to_string(), 436),
    ("89T55".to_string(), 553),
    ("86JT6".to_string(), 603),
    ("J22JT".to_string(), 461),
    ("KQ8QQ".to_string(), 309),
    ("82292".to_string(), 43),
    ("J6QQA".to_string(), 211),
    ("T986J".to_string(), 62),
    ("38383".to_string(), 382),
    ("4AQ6Q".to_string(), 614),
    ("2223J".to_string(), 42),
    ("8T36A".to_string(), 435),
    ("JTTAT".to_string(), 66),
    ("44QJQ".to_string(), 829),
    ("9TTTT".to_string(), 236),
    ("JAJ4A".to_string(), 959),
    ("4QJ4J".to_string(), 621),
    ("34333".to_string(), 235),
    ("Q2Q79".to_string(), 245),
    ("Q2A22".to_string(), 388),
    ("QQ44Q".to_string(), 635),
    ("58A54".to_string(), 539),
    ("26A87".to_string(), 440),
    ("727A9".to_string(), 149),
    ("J33Q6".to_string(), 406),
    ("6479T".to_string(), 627),
    ("KK66K".to_string(), 419),
    ("3333T".to_string(), 664),
    ("KK9KK".to_string(), 317),
    ("J2Q2Q".to_string(), 306),
    ("K5K5K".to_string(), 201),
    ("44224".to_string(), 63),
    ("6644J".to_string(), 322),
    ("QQQ3J".to_string(), 96),
    ("A4AK4".to_string(), 212),
    ("K46JQ".to_string(), 557),
    ("J656J".to_string(), 608),
    ("JAJAA".to_string(), 584),
    ("K5KK8".to_string(), 615),
    ("AAAA2".to_string(), 889),
    ("T6T66".to_string(), 478),
    ("QQTJ3".to_string(), 494),
    ("5QQ75".to_string(), 16),
    ("492QJ".to_string(), 909),
    ("JKK9K".to_string(), 411),
    ("346KQ".to_string(), 144),
    ("J27A7".to_string(), 403),
    ("88QQ4".to_string(), 707),
    ("T6579".to_string(), 866),
    ("TT669".to_string(), 358),
    ("TKT84".to_string(), 847),
    ("QAJQ4".to_string(), 848),
    ("9J9JA".to_string(), 229),
    ("3443A".to_string(), 479),
    ("455J3".to_string(), 154),
    ("43QQ3".to_string(), 762),
    ("A9449".to_string(), 246),
    ("JK666".to_string(), 417),
    ("5588J".to_string(), 448),
    ("5KAQ3".to_string(), 427),
    ("62A47".to_string(), 58),
    ("K4Q74".to_string(), 632),
    ("9999Q".to_string(), 468),
    ("37537".to_string(), 785),
    ("8KT74".to_string(), 166),
    ("K93Q2".to_string(), 428),
    ("2QQ5Q".to_string(), 688),
    ("A6A22".to_string(), 873),
    ("5986A".to_string(), 424),
    ("74T36".to_string(), 677),
    ("J3958".to_string(), 46),
    ("4J4Q4".to_string(), 451),
    ("64654".to_string(), 863),
    ("58TK3".to_string(), 409),
    ("JK6KJ".to_string(), 348),
    ("Q8QQJ".to_string(), 666),
    ("QQQ53".to_string(), 35),
    ("JAK28".to_string(), 839),
    ("6KKJK".to_string(), 713),
    ("23567".to_string(), 792),
    ("QQ5QQ".to_string(), 147),
    ("J9447".to_string(), 582),
    ("77QQ7".to_string(), 963),
    ("4T84K".to_string(), 204),
    ("44747".to_string(), 583),
    ("K858Q".to_string(), 307),
    ("76J5A".to_string(), 542),
    ("A57Q8".to_string(), 180),
    ("22262".to_string(), 252),
    ("7J689".to_string(), 105),
    ("44844".to_string(), 836),
    ("76674".to_string(), 23),
    ("7A22A".to_string(), 29),
    ("7JT56".to_string(), 570),
    ("7857J".to_string(), 456),
    ("9Q685".to_string(), 215),
    ("83878".to_string(), 190),
    ("277A7".to_string(), 172),
    ("T5T5T".to_string(), 500),
    ("64464".to_string(), 477),
    ("4T445".to_string(), 65),
    ("A43Q9".to_string(), 152),
    ("JT5J7".to_string(), 310),
    ("TTK55".to_string(), 715),
    ("7K85J".to_string(), 365),
    ("4A4AA".to_string(), 98),
    ("Q68QJ".to_string(), 952),
    ("6T266".to_string(), 929),
    ("2442T".to_string(), 629),
    ("6A776".to_string(), 119),
    ("Q57K2".to_string(), 369),
    ("555JJ".to_string(), 187),
    ("525TJ".to_string(), 438),
    ("Q99K7".to_string(), 980),
    ("Q9888".to_string(), 657),
    ("85854".to_string(), 967),
    ("QK85T".to_string(), 930),
    ("332A3".to_string(), 667),
    ("QJQQQ".to_string(), 243),
    ("AAAA3".to_string(), 121),
    ("44TQT".to_string(), 270),
    ("K35T6".to_string(), 637),
    ("TJ7Q7".to_string(), 559),
    ("TJT85".to_string(), 797),
    ("J6J25".to_string(), 853),
    ("J6348".to_string(), 593),
    ("7T6T7".to_string(), 498),
    ("J222Q".to_string(), 877),
    ("Q4QQQ".to_string(), 112),
    ("Q93KQ".to_string(), 117),
    ("48934".to_string(), 258),
    ("44465".to_string(), 817),
    ("AA66A".to_string(), 253),
    ("TJTT2".to_string(), 167),
    ("K67QK".to_string(), 384),
    ("T2292".to_string(), 430),
    ("77337".to_string(), 344),
    ("T99J8".to_string(), 192),
    ("334J4".to_string(), 982),
    ("2J939".to_string(), 833),
    ("23229".to_string(), 353),
    ("TJ6Q5".to_string(), 912),
    ("36T8K".to_string(), 755),
    ("2822J".to_string(), 535),
    ("48446".to_string(), 5),
    ("A8QA5".to_string(), 988),
    ("4J464".to_string(), 130),
    ("K9K88".to_string(), 694),
    ("A4777".to_string(), 266),
    ("888T9".to_string(), 17),
    ("33QQ3".to_string(), 639),
    ("67868".to_string(), 643),
    ("T78T7".to_string(), 248),
    ("6382Q".to_string(), 577),
    ("444Q7".to_string(), 596),
    ("2222K".to_string(), 981),
    ("99KK4".to_string(), 288),
    ("TJ4T4".to_string(), 575),
    ("QTJTT".to_string(), 99),
    ("33QAA".to_string(), 97),
    ("525J5".to_string(), 189),
    ("24QQ3".to_string(), 864),
    ("8465J".to_string(), 936),
    ("T48KA".to_string(), 571),
    ("JT9TT".to_string(), 255),
    ("6Q6J8".to_string(), 517),
    ("24999".to_string(), 387),
    ("TKAQJ".to_string(), 687),
    ("93944".to_string(), 914),
    ("JT4Q3".to_string(), 158),
    ("T76QT".to_string(), 481),
    ("48T9Q".to_string(), 225),
    ("JJA6J".to_string(), 141),
    ("95555".to_string(), 549),
    ("4JK37".to_string(), 686),
    ("62662".to_string(), 197),
    ("68QA7".to_string(), 566),
    ("J3742".to_string(), 747),
    ("J8K9K".to_string(), 287),
    ("QJ4J3".to_string(), 638),
    ("AAKKK".to_string(), 607),
    ("72A6T".to_string(), 948),
    ("JK2KK".to_string(), 878),
    ("67337".to_string(), 978),
    ("TT8TT".to_string(), 895),
    ("A8A8A".to_string(), 181),
    ("4K977".to_string(), 939),
    ("K44AQ".to_string(), 102),
    ("5T264".to_string(), 33),
    ("54TQK".to_string(), 183),
    ("6K666".to_string(), 340),
    ("KT9KK".to_string(), 366),
    ("3QQ9Q".to_string(), 742),
    ("5K829".to_string(), 311),
    ("2KK77".to_string(), 576),
    ("67A9Q".to_string(), 589),
    ("J4A5Q".to_string(), 712),
    ("8ATTJ".to_string(), 345),
    ("KK339".to_string(), 9),
    ("774J9".to_string(), 698),
    ("69996".to_string(), 652),
    ("KQQKQ".to_string(), 548),
    ("43339".to_string(), 188),
    ("J6585".to_string(), 681),
    ("62253".to_string(), 979),
    ("99J47".to_string(), 8),
    ("32522".to_string(), 425),
    ("K43KQ".to_string(), 115),
    ("33Q33".to_string(), 483),
    ("55AA5".to_string(), 636),
    ("48Q54".to_string(), 973),
    ("Q55QJ".to_string(), 184),
    ("9TTQ9".to_string(), 203),
    ("3J733".to_string(), 546),
    ("339JJ".to_string(), 556),
    ("J62J2".to_string(), 48),
    ("JT4Q5".to_string(), 780),
    ("99AA9".to_string(), 25),
    ("KKJQJ".to_string(), 275),
    ("75A42".to_string(), 273),
    ("QKTJ5".to_string(), 232),
    ("4JJ4T".to_string(), 808),
    ("7647K".to_string(), 786),
    ("22522".to_string(), 876),
    ("76737".to_string(), 599),
    ("J8858".to_string(), 217),
    ("9Q45T".to_string(), 153),
    ("8JT2K".to_string(), 493),
    ("26634".to_string(), 913),
    ("7QJTA".to_string(), 302),
    ("KK998".to_string(), 645),
    ("49TT8".to_string(), 840),
    ("T22T6".to_string(), 904),
    ("9AK2A".to_string(), 899),
    ("3TQ7J".to_string(), 304),
    ("3A48Q".to_string(), 376),
    ("33TTJ".to_string(), 720),
    ("246A6".to_string(), 983),
    ("9TJ32".to_string(), 224),
    ("35343".to_string(), 605),
    ("J4AQA".to_string(), 269),
    ("332T8".to_string(), 692),
    ("KK9K9".to_string(), 949),
    ("87KJ8".to_string(), 917),
    ("56KK8".to_string(), 303),
    ("76K52".to_string(), 933),
    ("AAJA2".to_string(), 82),
    ("38339".to_string(), 915),
    ("J2299".to_string(), 391),
    ("677J7".to_string(), 826),
    ("A22TA".to_string(), 316),
    ("69J6T".to_string(), 123),
    ("9JJ99".to_string(), 437),
    ("J5624".to_string(), 730),
    ("Q7QT7".to_string(), 292),
    ("5Q9QJ".to_string(), 547),
    ("K876J".to_string(), 541),
    ("7JJ44".to_string(), 377),
    ("K2435".to_string(), 901),
    ("TK64T".to_string(), 228),
    ("8878J".to_string(), 902),
    ("99989".to_string(), 193),
    ("222TT".to_string(), 708),
    ("QQ88Q".to_string(), 813),
    ("59294".to_string(), 668),
    ("TKTKJ".to_string(), 50),
    ("KQ893".to_string(), 932),
    ("3557T".to_string(), 265),
    ("7A396".to_string(), 110),
    ("Q8888".to_string(), 85),
    ("36663".to_string(), 447),
    ("87A99".to_string(), 818),
    ("7442J".to_string(), 37),
    ("TQ4T5".to_string(), 622),
    ("45J7J".to_string(), 20),
    ("Q6697".to_string(), 414),
    ("2226Q".to_string(), 892),
    ("Q7QQQ".to_string(), 233),
    ("5J395".to_string(), 429),
    ("22KJ6".to_string(), 986),
    ("662K6".to_string(), 94),
    ("J7398".to_string(), 783),
    ("AQJA8".to_string(), 843),
    ("78K8K".to_string(), 716),
    ("Q4QTK".to_string(), 810),
    ("J54J5".to_string(), 885),
    ("32223".to_string(), 238),
    ("97776".to_string(), 594),
    ("33693".to_string(), 69),
    ("47T2Q".to_string(), 286),
    ("2QA52".to_string(), 781),
    ("Q4J22".to_string(), 761),
    ("99A6A".to_string(), 685),
    ("9A999".to_string(), 11),
    ("444Q4".to_string(), 200),
    ("TAK95".to_string(), 56),
    ("7Q363".to_string(), 528),
    ("KA99J".to_string(), 809),
    ("QQTQQ".to_string(), 991),
    ("2KAK2".to_string(), 4),
    ("599K8".to_string(), 28),
    ("TT27T".to_string(), 717),
    ("22525".to_string(), 165),
    ("78222".to_string(), 349),
    ("A6667".to_string(), 838),
    ("3Q39T".to_string(), 393),
    ("87868".to_string(), 741),
    ("8AAJK".to_string(), 513),
    ("TQ555".to_string(), 543),
    ("79777".to_string(), 925),
    ("866J6".to_string(), 560),
    ("72788".to_string(), 931),
    ("23TTT".to_string(), 374),
    ("AA66T".to_string(), 772),
    ("K75K4".to_string(), 356),
    ("J6JKJ".to_string(), 509),
    ("K3K4J".to_string(), 891),
    ("44443".to_string(), 276),
    ("K8A88".to_string(), 611),
    ("8483A".to_string(), 753),
    ("KKKJJ".to_string(), 312),
    ("AA6JA".to_string(), 463),
    ("K9TKT".to_string(), 704),
    ("JTT66".to_string(), 296),
    ("6A987".to_string(), 869),
    ("22232".to_string(), 951),
    ("7K9A7".to_string(), 385),
    ("K2223".to_string(), 987),
    ("Q24AJ".to_string(), 554),
    ("766J8".to_string(), 240),
    ("8Q9JA".to_string(), 114),
    ("7AKJ9".to_string(), 736),
    ("QQ9QQ".to_string(), 851),
    ("28AA2".to_string(), 124),
    ("3939K".to_string(), 179),
    ("3K284".to_string(), 324),
    ("94K3J".to_string(), 964),
    ("63333".to_string(), 883),
    ("89J45".to_string(), 143),
    ("8J2T2".to_string(), 471),
    ("TT5QK".to_string(), 719),
    ("JKQKQ".to_string(), 823),
    ("A2898".to_string(), 407),
    ("4AK94".to_string(), 565),
    ("K889J".to_string(), 260),
    ("8KQQT".to_string(), 950),
    ("59K59".to_string(), 104),
    ("AA7TA".to_string(), 487),
    ("36666".to_string(), 308),
    ("T64TJ".to_string(), 573),
    ("6864J".to_string(), 626),
    ("6Q4QQ".to_string(), 703),
    ("AAQA4".to_string(), 75),
    ("9KJ9Q".to_string(), 649),
    ("26J22".to_string(), 257),
    ("99889".to_string(), 989),
    ("KJTTT".to_string(), 881),
    ("83TK9".to_string(), 79),
    ("82828".to_string(), 765),
    ("KKQK6".to_string(), 552),
    ("J5JQQ".to_string(), 683),
    ("A9A98".to_string(), 457),
    ("KKK2K".to_string(), 290),
    ("49999".to_string(), 464),
    ("64QTJ".to_string(), 706),
    ("88Q7Q".to_string(), 55),
    ("23233".to_string(), 118),
    ("37333".to_string(), 739),
    ("QTQTT".to_string(), 378),
    ("AT8T7".to_string(), 767),
    ("A687A".to_string(), 421),
    ("9A63T".to_string(), 15),
    ("325J9".to_string(), 749),
    ("K7966".to_string(), 921),
    ("AAAKK".to_string(), 489),
    ("29829".to_string(), 675),
    ("7377A".to_string(), 455),
    ("KJ3KK".to_string(), 57),
    ("4QT2K".to_string(), 36),
    ("J7384".to_string(), 718),
    ("K3K77".to_string(), 656),
    ("Q4J85".to_string(), 442),
    ("53AK9".to_string(), 39),
    ("53782".to_string(), 766),
    ("Q4545".to_string(), 572),
    ("522TJ".to_string(), 330),
    ("J4J42".to_string(), 472),
    ("JA56A".to_string(), 497),
    ("64534".to_string(), 137),
    ("4J322".to_string(), 27),
    ("57777".to_string(), 111),
    ("TT338".to_string(), 828),
    ("44J4J".to_string(), 984),
    ("8AAAA".to_string(), 612),
    ("J7Q25".to_string(), 821),
    ("Q7J57".to_string(), 368),
    ("88289".to_string(), 415),
    ("888JJ".to_string(), 646),
    ("36833".to_string(), 727),
    ("T9TT2".to_string(), 271),
    ("44A88".to_string(), 802),
    ("K33J2".to_string(), 155),
    ("Q3TQT".to_string(), 59),
    ("AK755".to_string(), 524),
    ("3J3J2".to_string(), 346),
    ("AJ3TA".to_string(), 941),
    ("9635K".to_string(), 357),
    ("499JJ".to_string(), 234),
    ("Q8884".to_string(), 337),
    ("J8QJ8".to_string(), 678),
    ("3333A".to_string(), 860),
    ("TT775".to_string(), 480),
    ("AATAQ".to_string(), 882),
    ("5QQAA".to_string(), 247),
    ("95833".to_string(), 80),
    ("3TTQ8".to_string(), 690),
    ("T32TJ".to_string(), 934),
    ("QAQQ6".to_string(), 370),
    ("A9998".to_string(), 684),
    ("KTJ37".to_string(), 585),
    ("52JKJ".to_string(), 320),
    ("879A8".to_string(), 640),
    ("7KJ77".to_string(), 161),
    ("9QQAA".to_string(), 216),
    ("32J6T".to_string(), 373),
    ("389A5".to_string(), 76),
    ("T988T".to_string(), 282),
    ("86865".to_string(), 518),
    ("45K45".to_string(), 578),
    ("8288T".to_string(), 796),
    ("96524".to_string(), 297),
    ("78J55".to_string(), 625),
    ("QJQKT".to_string(), 954),
    ("J4353".to_string(), 334),
    ("37KAJ".to_string(), 86),
    ("4J9TQ".to_string(), 401),
    ("Q674K".to_string(), 940),
    ("QQKQQ".to_string(), 617),
    ("A2356".to_string(), 460),
    ("2A38K".to_string(), 825),
    ("Q3TQ2".to_string(), 45),
    ("57AJ3".to_string(), 790),
    ("3A7J7".to_string(), 841),
    ("A43A4".to_string(), 669),
    ("24AJ3".to_string(), 653),
    ("68666".to_string(), 466),
    ("33793".to_string(), 88),
    ("9J999".to_string(), 439),
    ("5J577".to_string(), 389),
    ("9Q7J6".to_string(), 173),
    ("Q5T8T".to_string(), 540),
    ("A7AT7".to_string(), 531),
    ("T99TT".to_string(), 206),
    ("565A5".to_string(), 858),
    ("7935J".to_string(), 561),
    ("A593Q".to_string(), 861),
    ("898A9".to_string(), 18),
    ("A8887".to_string(), 392),
    ("424J2".to_string(), 40),
    ("36336".to_string(), 867),
    ("7J577".to_string(), 205),
    ("5JJ43".to_string(), 386),
    ("TTTTJ".to_string(), 693),
    ("QT624".to_string(), 628),
    ("A7TT7".to_string(), 832),
    ("K44K5".to_string(), 150),
    ("3J35Q".to_string(), 198),
    ("9T29A".to_string(), 726),
    ("KK5J7".to_string(), 423),
    ("AAJAT".to_string(), 396),
    ("37J7K".to_string(), 764),
    ("7TTT7".to_string(), 971),
    ("7K63A".to_string(), 647),
    ("TT66T".to_string(), 515),
    ("4644A".to_string(), 798),
    ("TJ944".to_string(), 177),
    ("2J6K9".to_string(), 323),
    ("47674".to_string(), 880),
    ("AAJAA".to_string(), 379),
    ("86884".to_string(), 74),
    ("6J366".to_string(), 64),
    ("ATQ2T".to_string(), 469),
    ("7J9QK".to_string(), 680),
    ("TATT7".to_string(), 782),
    ("Q7QQ4".to_string(), 52),
    ("52555".to_string(), 816),
    ("AA9A5".to_string(), 156),
    ("K2K8T".to_string(), 283),
    ("278J8".to_string(), 724),
    ("95Q55".to_string(), 360),
    ("3K332".to_string(), 516),
    ("7Q5A3".to_string(), 125),
    ("TAATT".to_string(), 733),
    ("2K44K".to_string(), 363),
    ("58K74".to_string(), 601),
    ("7J77J".to_string(), 919),
    ("4474J".to_string(), 191),
    ("7T4JJ".to_string(), 521),
    ("22A6K".to_string(), 620),
    ("33T3J".to_string(), 244),
    ("JTAJT".to_string(), 551),
    ("879Q5".to_string(), 338),
    ("67324".to_string(), 1000),
    ("JJ333".to_string(), 918),
    ("887AA".to_string(), 957),
    ("QTAKK".to_string(), 504),
    ("22A22".to_string(), 999),
    ("A336A".to_string(), 700),
    ("4J93T".to_string(), 729),
    ("K5555".to_string(), 992),
    ("QTTAJ".to_string(), 846),
    ("QT59A".to_string(), 791),
    ("42J4A".to_string(), 145),
    ("JKK9T".to_string(), 526),
    ("JA887".to_string(), 658),
    ("J2255".to_string(), 618),
    ("JQJ3Q".to_string(), 6),
    ("6A4JT".to_string(), 176),
    ("683J8".to_string(), 171),
    ("A66Q6".to_string(), 533),
    ("Q268J".to_string(), 527),
    ("8Q2K9".to_string(), 241),
    ("792T2".to_string(), 778),
    ("QJJQA".to_string(), 402),
    ("AAT24".to_string(), 827),
    ("A75AA".to_string(), 697),
    ("99444".to_string(), 209),
    ("AKA99".to_string(), 799),
    ("77667".to_string(), 777),
    ("52275".to_string(), 962),
    ("7688K".to_string(), 422),
    ("72689".to_string(), 174),
    ("99929".to_string(), 395),
    ("TJ444".to_string(), 642),
    ("22Q2Q".to_string(), 90),
    ("AJ447".to_string(), 834),
    ("58545".to_string(), 564),
    ("JT5J4".to_string(), 756),
    ("86888".to_string(), 822),
    ("9A563".to_string(), 644),
    ("666QQ".to_string(), 355)];
    hands
}